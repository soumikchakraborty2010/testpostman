{
	"info": {
		"_postman_id": "3a45d28a-4d86-4088-97b9-ab2f16afddb3",
		"name": "2_API_Session-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1781081"
	},
	"item": [
		{
			"name": "main-call",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/******************/",
							"//Add req header runtime",
							"pm.request.addQueryParams(\"testHeader=testValue\");",
							"",
							"",
							"//Calling custom object defined functions ",
							"console.log(customutils.myFunc());",
							"console.log(newobj.myFunc2());",
							"",
							"",
							"//Calling a function stored in global variable with arguments",
							"var parsedFunc = eval(\"(\"+globals.wrap+\")\");",
							"var i = parsedFunc(2, 3);",
							"console.log(i);",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//calling a global var stored function with eval()",
							"eval(pm.globals.get(\"commonTests\"))();",
							"",
							"//HTML parsing (for html example please replace the URL in the main-call req to www.google.com)",
							"const utils = eval(globals.loadUtils);",
							"utils.reuseableFunction();",
							"",
							"//Set what will be the next request from Tests",
							"postman.setNextRequest(\"call-3\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "X-Api-Key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "PMAK-640d8c0aacc07f0c5086e3c0-e7381e4c0568a985c95cfc26cc58aaa3de",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "dsad",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "dsad",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://www.google.com",
					"protocol": "https",
					"host": [
						"www",
						"google",
						"com"
					]
				}
			},
			"response": []
		},
		{
			"name": "call-2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log('I am in call 2');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "X-Api-Key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "PMAK-640d8c0aacc07f0c5086e3c0-e7381e4c0568a985c95cfc26cc58aaa3de",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "call-3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"I am in call 3\");",
							"",
							"//Stopping the next requests. Here the collection will stop for that iteration",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "call-4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"I am in call 4\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Conditional tests by looping through the JSON",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// saving the API Response as a variable\r",
							"let response = pm.response.json();\r",
							"\r",
							"// looping through each camera object\r",
							"response.data.ActiveCamera.forEach(function(cam) {\r",
							"    // checking if the camera has a property named \"RectilinearIR\"\r",
							"    if(cam.hasOwnProperty(\"RectilinearIR\")) {\r",
							"        // test if the ImageCenterX value in the object is equal to 0.5\r",
							"        pm.test(\"Test diameter for RectilinearIR\", function () {\r",
							"            let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r",
							"            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r",
							"        });\r",
							"    } \r",
							"    // checking if the camera has a property named \"Fisheye\"\r",
							"    if (cam.hasOwnProperty(\"Fisheye\")) {\r",
							"        // test if the ImageCenterX value in the object is equal to 0.5109375\r",
							"            pm.test(\"Test diameter for Fisheye\", function () {\r",
							"            let intrinsicCalibrationParams = cam.Fisheye.IntrinsicCalibration;\r",
							"            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5109375);\r",
							"        });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"__type\": \"Aldis.Models.v4.Info.CameraStatusModel, Aldis.Models\",\r\n    \"ActiveCamera\": [\r\n        {\r\n            \"RectilinearIR\": {\r\n                \"CalibrationMask\": {\r\n                    \"Length\": 0,\r\n                    \"Width\": 0,\r\n                    \"Id\": \"3fc388275b724e82819cf44603db69c3\",\r\n                    \"Polygon\": []\r\n                },\r\n                \"CameraMasks\": {\r\n                    \"OcclusionMasks\": [],\r\n                    \"RoadMasks\": [],\r\n                    \"ZoneMasks\": []\r\n                },\r\n                \"CompassHeading\": 0,\r\n                \"ExtrinsicCalibration\": {\r\n                    \"HeightFeet\": 16\r\n                },\r\n                \"IntrinsicCalibration\": {\r\n                    \"FocalLengthX\": 428,\r\n                    \"FocalLengthY\": 480,\r\n                    \"ImageCenterX\": 0.3,\r\n                    \"ImageCenterY\": 0.5,\r\n                    \"ImageHeight\": 480,\r\n                    \"ImageWidth\": 720,\r\n                    \"RadialDistortion1\": 0,\r\n                    \"RadialDistortion2\": 0,\r\n                    \"TangentialDistortion1\": 0,\r\n                    \"TangentialDistortion2\": 0,\r\n                    \"Channels\": 3,\r\n                    \"Depth\": 8,\r\n                    \"Height\": 480,\r\n                    \"MaxJpegSize\": 140000,\r\n                    \"Width\": 720\r\n                },\r\n                \"IsConfigured\": true,\r\n                \"MACAddress\": \"AC:CC:8E:23:35:86\",\r\n                \"Make\": \"AXIS\",\r\n                \"Name\": \"SW FLIR\"\r\n            }\r\n        },\r\n        {\r\n            \"Fisheye\": {\r\n                \"CameraMasks\": {\r\n                    \"OcclusionMasks\": [],\r\n                    \"RoadMasks\": [],\r\n                    \"ZoneMasks\": []\r\n                },\r\n                \"CompassHeading\": 0,\r\n                \"ExtrinsicCalibration\": {\r\n                    \"HeightFeet\": 16\r\n                },\r\n                \"IntrinsicCalibration\": {\r\n                    \"Diameter\": 0.85625,\r\n                    \"ImageCenterX\": 0.5109375,\r\n                    \"ImageCenterY\": 0.50625,\r\n                    \"ImageHeight\": 960,\r\n                    \"ImageWidth\": 1280,\r\n                    \"ViewAngleDegrees\": 185,\r\n                    \"Channels\": 3,\r\n                    \"Depth\": 8,\r\n                    \"Height\": 960,\r\n                    \"MaxJpegSize\": 140000,\r\n                    \"Width\": 1280\r\n                },\r\n                \"IsConfigured\": true,\r\n                \"MACAddress\": \"00:30:53:1d:2c:22\",\r\n                \"Make\": \"Basler\",\r\n                \"Name\": \"SW Bell\"\r\n            }\r\n        }\r\n    ],\r\n    \"MissingCameras\": [],\r\n    \"UnknownCameras\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://postman-echo.com/post",
					"protocol": "http",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "api-collections",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log('I am in call 2');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "X-Api-Key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "PMAK-640d8c0aacc07f0c5086e3c0-e7381e4c0568a985c95cfc26cc58aaa3de",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.getpostman.com/collections",
					"protocol": "https",
					"host": [
						"api",
						"getpostman",
						"com"
					],
					"path": [
						"collections"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/********* Item 1 in Session 2 ************************************************/",
					"//Add req header runtime",
					"",
					"",
					"/******** Global Functions with custom objects and then calling it from requests ***************************************************",
					"****************************************/",
					"",
					"customutils = {",
					"  myFunc: function() {",
					"    return 'hello there';",
					"  }",
					"};",
					"",
					"newobj = {",
					"  myFunc2: function() {",
					"    return 'hi there';",
					"  }",
					"};",
					"",
					"",
					"/******** Global Function, takes arguments and returns something - used with eval() ********",
					"****************************************/",
					"var stringWrap = function wrapTest(param1, param2) {",
					"    return param1+param2;",
					"};",
					"postman.setGlobalVariable(\"wrap\", stringWrap);",
					"",
					"",
					"",
					"/******** Global Function that contains Tests, Skip Test on condition *****************************************************",
					"****************************************/",
					"var commonTests = () => {",
					"    const skipTest = true;",
					"",
					"    pm.test(\"Status code is 200\", function () {",
					"      pm.response.to.have.status(200);",
					"    });",
					"    pm.test(\"Content-Type is present\", function () {",
					"      pm.response.to.have.header(\"Content-Type\"); ",
					"    });",
					"",
					"    (skipTest ? pm.test.skip : pm.test)('Response time is less than 200 ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(200);",
					"    });",
					"}",
					"pm.globals.set(\"commonTests\", commonTests.toString());",
					"",
					"",
					"",
					"/******** Parse HTML with Cheerio ****************************************************",
					"****************************************/",
					"pm.globals.set('loadUtils', function loadUtils() {",
					"    let utils = {};",
					"    utils.reuseableFunction = function reuseableFunction() {",
					"        const $ = cheerio.load(pm.response.text());",
					"        console.log($(\"title\").text()); // get title",
					"    }",
					"    return utils;",
					"} + '; loadUtils();');",
					"//tests['Utils initialized'] = false;",
					"",
					"",
					"",
					"/******** Item 6 in Session 2*****************************************************",
					"****************************************/",
					"//skip requests",
					"//stop next request",
					"",
					"",
					"/******** Item 7 in Session 2*****************************************************",
					"****************************************/",
					"//skip tests",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}